#!/usr/bin/env python3
"""
Watch git repositories for uncommitted or unpushed changes

TODO:

* Scan file system for .git directories

* Explicit list of directories to monitor

* In each directory, run 'git status' in porcelain mode

* Must show branch upstream status - if no associated remote, flag it

* Ideally email on fail

* Install into systemd incl .timer
"""
import argparse
import sys
import subprocess

commands = []
def command(f):
	commands.append(f)
	return f

# First command is also the default
@command
def check(repos):
	"""Check all repositories on your list"""
	sys.exit("Not implemented [check]")

@command
def add(repos):
	"""Add this or another repository to the watch list"""
	# TODO: Add a 'verbose mode'
	repos = repos or ["."]
	for repo in repos:
		dir = subprocess.check_output(["git", "-C", repo, "rev-parse", "--show-toplevel"])
		dir = dir.decode("ascii").strip("\n")
		# TODO: Ensure that 'dir' doesn't have any regex-special characters, or escape them
		subprocess.check_call(["git", "config", "--global", "--replace-all", "rosuav.git-watch.repos", dir, dir])

def main():
	parser = argparse.ArgumentParser(description=__doc__.split("\n")[0])
	subparsers = parser.add_subparsers()
	parser.set_defaults(func=commands[0], repos=[])
	for func in commands:
		par = subparsers.add_parser(func.__name__, help=func.__doc__.split("\n")[0])
		par.set_defaults(func=func)
		par.add_argument("repos", nargs="*", help="Repository(ies) to check")
	args = parser.parse_args()
	return args.func(args.repos)

if __name__ == '__main__':
	sys.exit(main())
