#!/usr/local/bin/pike
//Attempt to record and play back, without noise
//Give it a second or so of silence before anything happens.
//Will feed recorded (and noise-reduced) data to stdout,
//and will play back (unchanged) any data received on stdin.
//If given an SSH destination, will pipe itself bidirectionally
//to the given computer and attempt to invoke itself there.

array processes = ({ });
void bomb()
{
	werror("Child gone, terminating...\n");
	processes->kill(2);
	rm("/tmp/noise.wav");
	rm("/tmp/noise.dat");
	exit(0);
}

int main(int argc, array(string) argv)
{
	array(string) format = ({"-f", "s16_le", "-r", "16000"});
	werror("Building noise profile...\n");
	Process.create_process(({"arecord", "-d1"}) + format + ({"/tmp/noise.wav"}))->wait();
	Process.create_process(({"sox", "/tmp/noise.wav", "-n", "noiseprof", "/tmp/noise.dat"}))->wait();
	werror("Noise profile built.\n");
	object ssh_in, ssh_out;
	if (argc >= 2 && argv[1] != "-c")
	{
		ssh_in = Stdio.File(); ssh_out = Stdio.File();
		processes += ({
			Process.create_process(({"ssh"}) + argv[1..] + ({"shed/voip"}),
				(["stdin": ssh_in->pipe(), "stdout": ssh_out->pipe()])),
		});
	}
	object pipe = Stdio.File();
	//Three processes. Each one has its stderr linked to our stderr.
	processes += ({
		Process.create_process(({"arecord"}) + format,
			(["stdin": Stdio.File("/dev/null"), "stdout": pipe->pipe(), "callback": bomb])),
		Process.create_process(({"sox", "-twav", "-", "-twav", "-", "noisered", "/tmp/noise.dat", ".2"}),
			(["stdin": pipe, "stdout": ssh_in, "callback": bomb])),
		Process.create_process(({"aplay"}),
			(["stdin": ssh_out, "stdout": Stdio.File("/dev/null", "wct"), "callback": bomb])),
	});
	return -1;
}
