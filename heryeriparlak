#!/usr/bin/env pike
//Her Yeri Parlak. Named after a dragon-killing magic item from
//Soyutlanma, this demands Combat Reflexes.
//Attempt to record and play back, without noise
//Give it a second or so of silence before anything happens.
//Will feed recorded (and noise-reduced) data to stdout,
//and will play back (unchanged) any data received on stdin.
//If given an SSH destination, will pipe itself bidirectionally
//to the given computer and attempt to invoke itself there.

string noisemode;

void log(string msg)
{
	werror("[%s] %s\n", gethostname(), msg);
}

array processes = ({ });
array files = ({ });
void bomb()
{
	log("Child gone, terminating...");
	processes->kill(2);
	rm(files[*]);
	exit(0);
}

int main(int argc, array(string) argv)
{
	array(string) format = ({"-f", "s16_le", "-r", "12000"});
	log("Building noise profile...");
	Process.create_process(({"arecord", "-d1"}) + format + ({"/tmp/noise.wav"}))->wait();
	Process.create_process(({"sox", "/tmp/noise.wav", "-n", "noiseprof", "/tmp/noise.dat"}))->wait();
	files += ({"/tmp/noise.wav", "/tmp/noise.dat"});
	log("Noise profile built.");
	object master_in=Stdio.stdin, master_out=Stdio.stdout;
	noisemode = (argv[-1]/" ")[-1]; //See, this is how to get the last word in your arguments :)
	if (sizeof(noisemode - "l" - "r" - "n")) noisemode = "lnln";
	if (argc >= 2)
	{
		//SSH mode
		if (argv[1] != "-c")
		{
			//Establish remote link
			master_in = Stdio.File(); master_out = Stdio.File();
			log("Establishing link to " + argv[1]);
			processes += ({
				Process.create_process(({"ssh", argv[1], "shed/heryeriparlak", noisemode[2..]}),
					(["stdin": master_out->pipe(), "stdout": master_in->pipe()])),
			});
		}
		master_out->write("%2H", Stdio.read_file("/tmp/noise.dat"));
		sscanf(master_in->read(2), "%2c", int len);
		Stdio.write_file("/tmp/remote_noise.dat", master_in->read(len));
		files += ({"/tmp/remote_noise.dat"});
	}
	object pipe = Stdio.File();
	//All subprocesses have stderr linked to our stderr.
	subprocess(0, ({"arecord", "-B", "10"}) + format, Stdio.File("/dev/null"), master_out);
	subprocess(1, ({"aplay"}), master_in, Stdio.File("/dev/null", "wct"));
	return -1;
}

void subprocess(int dir, array cmd, object stdin, object stdout)
{
	mapping opts = (["stdin": stdin, "stdout": stdout, "callback": bomb]);
	array inout = ({"stdin", "stdout"});
	if (noisemode[dir] != 'n')
	{
		object pipe = Stdio.File();
		string noisefile = noisemode[dir]=='r' ? "/tmp/remote_noise.dat" : "/tmp/noise.dat";
		mapping soxopts = opts + ([inout[dir]: pipe->pipe(), inout[!dir]: opts[inout[!dir]]]);
		opts[inout[!dir]] = pipe;
		processes += ({
			Process.create_process(({"sox", "-twav", "-", "-twav", "-", "noisered", noisefile, ".2"}), soxopts),
		});
	}
	processes += ({
		Process.create_process(cmd, opts),
	});
}
